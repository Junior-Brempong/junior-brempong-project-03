This documentation references the coding logic for this particular application. It will go in sequence according to the app build out and will reference the steps provided in the code in each particular file (example: Step 1 in FirebaseConfig.js)

1. FirebaseConfig.js:

Here we are setting up our Firebase API! This is the information that we will use to initalize our app and connect to the backend of Firebase.

// Step 1: Initalize the firestore service:
  // We save both of these functions into variables for when we easily want to interact with either one of these


// Step 2: Export our named variables so we can use these services in other files in the future

2. Title.js:

This component references the JSX we will mount to that page on page load, specifically in the header.

3. Upload Form:

// 1: create the function in which we would like to mount the form JSX to our page, where our user will be able to submit an image from their computers.


// 2: We make a our changeHandler function which is connect to our onChange for our button.


// 3(a): Because of the event object we are given for this function we can use this to access the file the user has selected

     //.files is a property called files, this gives us all the files that have been selected. However, we want the first file selected, so we can has this into the array to target. This gives us a multitude of properties to parse through (exp. file type, size, etc).

    //  We want to be able to access this data globally, so we can store this into a local piece of state


// 4 (a): We only want to store this information if a file is created. Otherwise when a user clicks on our input and chooses nothing we would set the state with another null value. For this we can write a conditional.

      // We also want to make sure that only certain file types can be selected (we wouldn't want audio being uploaded). We know that our event object gave us access to this property, so we can add this into our conditional as well. 
            
      // 4 (b): First we need to create an array with the approved types and pass this down. 
        // Now this conditional is asking "Does this array include the type that user has selected?"

      // 4(c): If this is not the case, we would like an error to show on the screen, so the user knows to select another file type!


// Step 5(a): We want to output the results of our user selection here. So we can create a div where we can output our error or file if we have it (this is why we used state, so store these variables!) 

    // 5(b): Because our error will be outputted, we need to tell our JSX to remove the output if the right image type is selected

    // If the there is an error we are going to output a div with a class of error and inside we are going to output the error itself

    // We will do the same thing and output if we have a valid file type as well. This way a user can see what they have selected.

    // We want to pass through the file to the progress bar, so we can now gain access to to FireStorage hook that we created. We can also pass through the setImgFile as well so that when the progress is complete we can set the value back to null

4. Firestorage Hook:

// We are now creating a small chunk of code in react that will give us reuseable code and can then use them in whatever component needs them. The whole point of this hook is create references for us to use in our components!

// 1: This hook is a function that will be responsible for handling our file uploads and then returning us values about the upload (exp. progress & image url)


2: Inside the imgFile we want to create three pieces of state:
        
        // (a) progress of the upload
        
        // (b) any errors from the upload
        
        // (c) the image url we get back from storage after the image has full uploaded


// 3(a): We want to use our storage to upload the file that the user selects. This code will need to run every time that that there is a new imgFile value passed through to our storage. Hence, we must use a useEffect hook!

      //3(b): The logic to upload the file, and it will be dependent on the array we set, which will rerend our page


// 4(a): We can use a method called put on our storageRef that will now take a file and put it in the reference. This however can take some time, so what we can do is add a listener which will fire functions when certain events happen. 

      // 4(b): formula for percentage that we can grab from this snap imgFile
      
      // 4(c): We can also take in a third argument that is also a function that will fire if there is an error with the upload
      
      // 4(d) Pass through another argument that will fire once the upload is complete.


// 5: Now we want to be able to return these values


// 6: Our hook has triggered because of the user upload, we now want to take the url we are provided to in from our progress bar and pass this through to the fire store. This is how we will display the information on the page. We can use a method called  addDoc and collection which firebase will create for us. We now will have an image collection with a randomized ID and two fields (createdAt & url)


5. Progress Bar:

// Step 1: Return a JSX template that we can put in our App.js which will impact what is displayed on screen


// Step 2: We need to grab the props that were passed to the progress bar (imgFile & setImgFile)

      // Step 2(a): In our progress bar function, we are going to get the value back for the URL and the progress. This is why we created a hook to pass. We returned these in our Firestorage hook. Now this hook will fire our useEffect. It will take the file, create a reference and try and upload it, when it does this, we will recieve the values for url & progress. The value of our percentage will be null until we reach 100% of the progress.
      
      // Step 2(b): Now that we have access to the progress status, we can style our progress bar div to reflect that by adding the width of the progress as a style
      
      // Step 2(c): Now that we have a progress bar, we want to remove it once it reaches full completion, to do this we set our file back to null once complete. To do this we can use useEffect to fire the function when the file of url changes.   

6. Firestore Hook 

// Now that we have a database collection of documents from our FireStorage.js, we can listen to this collection to get all the urls as they are added in real time to our project by using this hook! This is the connection between our app and the firestore.

// We want to access the information from our firestore database, so we can cycle through our URLs and add in image for each. This will be created through a hook that will give us more useablility throughout our code if we ever need to fire up the firestore

// Step 1: We want to set up a piece of state for the documents that we recieve. We will leave this first as an empty array because we don't have an documents


// Step 2: We now need to communicate with the database in order to get the documents. This will happen in a useEffect so that it can refigure each time the collection changes 

  // Step 2(a): This is to get a collection from our firestore, this would essentially be images, however, we passed that through and can say collection

  // Step 2(b):This method fires a callback function every time that a change occurs inside the collection and also fires it once initially. 

        // This function takes in a snapshot object that represents a snapshot of the database collection. Everytime now that a document is added, it gets a snap shot of the documents collection again (this is how we are essentially listening to our database)

          // cycle through document currently in the collection when we get the snapshot

          // We can now push data from each document into the document array. This gives us the data in the document. Using spread will give us all the properties of these docs and then push this to our documents which is an empty array. Now each document stored in the array will have the data associated with it and the id. We can use the key we get for when we need to output

          // We can not set our empty documents array to the all the documents we have recieved from firestore

          //We then want to return all the docs

7. Image Display & Delete

// This will be the function that returns the JSX with our of our photos to the screen

// Step 1: We deconstruct our docs and use useFirestore hook and pass through our 'images' collection, which allows us to go through our firestore and look at the collections named images


// Step 2: We have our docs thanks to our Firestore hook, now what we can do is map through each of these documents and dispay them to the page, assiging the unique key fire store gives them as their key */

//Step 3: We create an image delete function which will pass through to a button we have created in our JSX

      // Step 3(a) :Prevent default for clicking the button

      // Step 3(b): We made the id of our button the unique key from firestore that each image recieves through our map, now the onClick has access to this and can delete the image. So we use the deleteDoc() given to use from firestore and pass through the exact key needed to delete the images from our map. This is again, given to our onClick to our button, making us able to delete each image clicked

8. Back To Top Button:

Simple component we use to render a button on our screen that we have passed through a function of ‘topFunction()’ for when a user clicks it will return the user to the top of the page.
